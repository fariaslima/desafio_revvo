// ===== MIXINS =====

// Media Queries
@mixin media-breakpoint-up($name) {
  $min: map-get($breakpoints, $name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: map-get($breakpoints, $name) - 0.02;
  @media (max-width: $max) {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper) {
  $min: map-get($breakpoints, $lower);
  $max: map-get($breakpoints, $upper) - 0.02;
  
  @if $min != 0 and $max != 0 {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == 0 {
    @include media-breakpoint-up($lower) {
      @content;
    }
  } @else if $min == 0 {
    @include media-breakpoint-down($upper) {
      @content;
    }
  }
}

// Container
@mixin container() {
  max-width: $container-max-width;
  margin: 0 auto;
  padding: 0 $container-padding;
}

// Flexbox utilities
@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between() {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column() {
  display: flex;
  flex-direction: column;
}

// Button styles
@mixin button-base() {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: $border-radius;
  font-family: inherit;
  font-weight: $font-weight-medium;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-base;
  
  &:focus {
    outline: 2px solid $primary-color;
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-variant($bg-color, $text-color: $white, $hover-bg: darken($bg-color, 10%)) {
  @include button-base();
  background-color: $bg-color;
  color: $text-color;
  
  &:hover:not(:disabled) {
    background-color: $hover-bg;
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
  }
}

// Card styles
@mixin card() {
  background: $white;
  box-shadow: $shadow;
  overflow: hidden;
  transition: all $transition-base;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: $shadow-xl;
  }
}

// Input styles
@mixin input-base() {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 2px solid $gray-lighter;
  border-radius: $border-radius-xl;
  font-size: $font-size-base;
  font-family: inherit;
  transition: border-color $transition-base;
  
  &:focus {
    outline: none;
    border-color: $primary-color;
  }
  
  &::placeholder {
    color: $gray-medium;
  }
}

// Text utilities
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Position utilities
@mixin position-center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin position-cover() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Visibility utilities
@mixin sr-only() {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Animation utilities
@mixin fade-in($duration: $transition-base, $delay: 0s) {
  opacity: 0;
  animation: fadeIn $duration ease-in-out $delay forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

@mixin slide-in-left($duration: $transition-slow, $delay: 0s) {
  opacity: 0;
  transform: translateX(-50px);
  animation: slideInLeft $duration ease-out $delay forwards;
}

@keyframes slideInLeft {
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

// Grid utilities
@mixin grid-auto-fit($min-width: 300px, $gap: 2rem) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
  align-items: start;
}

// Hover effects
@mixin hover-lift($lift-distance: 5px) {
  transition: transform $transition-base, box-shadow $transition-base;
  
  &:hover {
    transform: translateY(-$lift-distance);
    box-shadow: $shadow-xl;
  }
}

// Loading state
@mixin loading-shimmer() {
  background: linear-gradient(90deg, $gray-lightest 25%, rgba($gray-lightest, 0.5) 50%, $gray-lightest 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}